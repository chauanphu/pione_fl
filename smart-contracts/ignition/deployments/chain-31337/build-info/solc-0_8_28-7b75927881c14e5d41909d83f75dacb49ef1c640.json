{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-7b75927881c14e5d41909d83f75dacb49ef1c640",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/FederatedLearning.sol": "project/contracts/FederatedLearning.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/FederatedLearning.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title FederatedLearning\n * @dev A smart contract to coordinate a multi-round federated learning \"campaign\".\n * It orchestrates a predefined number of rounds with a fixed set of participants.\n * Models are referenced via IPFS CIDs stored off-chain.\n */\ncontract FederatedLearning is Ownable {\n    // --- Enums and Structs ---\n\n    enum CampaignState {\n        INACTIVE, // No campaign is running\n        SUBMISSION, // Accepting model submissions from trainers\n        VALIDATION, // Accepting validation judgments from validators\n        AGGREGATION // Waiting for the aggregator to finalize the round\n    }\n\n    struct ModelSubmission {\n        string cid;\n        address trainer;\n        uint256 positiveVotes;\n    }\n\n    // --- NEW: Training Campaign Struct ---\n    // This struct holds all the data for a single, complete training process.\n    struct Campaign {\n        uint256 id;\n        CampaignState state;\n        string globalModelCID;\n        uint8 currentRound;\n        uint8 totalRounds; // Max 255 rounds per campaign, saves gas\n        mapping(address => bool) participants; // Authorized training nodes\n        uint256 submissionDeadline; // Timestamp for when submission period ends\n        uint8 minSubmissions; // The required number of submissions (quorum)\n        uint8 submissionCounter; // How many nodes have submitted for the current round\n    }\n\n    // --- State Variables ---\n\n    uint256 public campaignCounter;\n    uint256 public activeCampaignId;\n\n    // Mapping from a campaign ID to its Campaign struct\n    mapping(uint256 => Campaign) public campaigns;\n\n    // --- MODIFIED: Storage is now nested by Campaign ID and Round Number ---\n    // Campaign ID -> Round Number -> Trainer Address -> Model CID\n    mapping(uint256 => mapping(uint8 => mapping(address => string)))\n        private roundSubmissions;\n    // Campaign ID -> Round Number -> All submitted models\n    mapping(uint256 => mapping(uint8 => ModelSubmission[]))\n        private modelsInRound;\n    // Campaign ID -> Round Number -> Model CID -> Validator Address -> Voted\n    mapping(uint256 => mapping(uint8 => mapping(string => mapping(address => bool))))\n        private modelValidators;\n\n    uint256 public constant REQUIRED_VALIDATIONS = 0;\n\n    // --- Events ---\n\n    // --- MODIFIED: Events now reference a campaignId ---\n    event CampaignCreated(\n        uint256 indexed campaignId,\n        uint8 totalRounds,\n        string initialModelCID\n    );\n    event NewRoundStarted(\n        uint256 indexed campaignId,\n        uint8 indexed round,\n        string initialModelCID\n    );\n    event ModelSubmitted(\n        uint256 indexed campaignId,\n        uint8 indexed round,\n        address indexed trainer,\n        string modelCID\n    );\n    event ModelValidated(\n        uint256 indexed campaignId,\n        uint8 indexed round,\n        address indexed validator,\n        string modelCID,\n        bool isValid\n    );\n    event RoundFinalized(\n        uint256 indexed campaignId,\n        uint8 indexed round,\n        string newGlobalModelCID\n    );\n    event CampaignCompleted(\n        uint256 indexed campaignId,\n        uint8 indexed round,\n        string finalGlobalModelCID\n    );\n    event GlobalModelChanged(\n        uint256 indexed campaignId,\n        uint8 indexed round,\n        CampaignState state,\n        string finalGlobalModelCID\n    );\n    event CampaignCancelled(uint256 indexed campaignId);\n    event CampaignStateChanged(\n        uint256 indexed campaignId,\n        CampaignState newState\n    );\n\n    // --- Constructor ---\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    // --- Functions ---\n\n    /**\n     * @dev Creates and starts a new training campaign. Defines all parameters upfront.\n     * Can only be called by the contract owner.\n     * @param _participants An array of addresses for the authorized training nodes.\n     * @param _totalRounds The total number of training rounds for this campaign.\n     * @param _initialModelCID The IPFS CID of the model to be used for the first round.\n     * @notice The number of epochs is a client-side parameter for local training\n     * and is not stored or enforced on-chain.\n     */\n    // --- NEW: Replaces startNewRound() and setGlobalModelCID() ---\n    function createTrainingCampaign(\n        address[] memory _participants,\n        uint8 _totalRounds,\n        string memory _initialModelCID,\n        // --- NEW PARAMETERS ---\n        uint256 _submissionPeriod, // e.g., 3600 seconds for a 1-hour deadline\n        uint8 _minSubmissions // The minimum number of submissions required\n    ) external onlyOwner {\n        require(\n            campaigns[activeCampaignId].state == CampaignState.INACTIVE,\n            \"An existing campaign is active\"\n        );\n        require(\n            _participants.length > 0,\n            \"Must provide at least one participant\"\n        );\n        require(\n            _minSubmissions > 0 && _minSubmissions <= _participants.length,\n            \"Invalid min submissions\"\n        );\n        require(_submissionPeriod > 0, \"Submission period must be positive\");\n\n        campaignCounter++;\n        activeCampaignId = campaignCounter;\n\n        Campaign storage newCampaign = campaigns[activeCampaignId];\n        newCampaign.id = activeCampaignId;\n        newCampaign.totalRounds = _totalRounds;\n        newCampaign.currentRound = 1;\n        newCampaign.state = CampaignState.SUBMISSION;\n        newCampaign.globalModelCID = _initialModelCID;\n        // --- SET NEW VARIABLES ---\n        newCampaign.minSubmissions = _minSubmissions;\n        newCampaign.submissionDeadline = block.timestamp + _submissionPeriod;\n        newCampaign.submissionCounter = 0; // Reset for the first round\n\n        for (uint i = 0; i < _participants.length; i++) {\n            newCampaign.participants[_participants[i]] = true;\n        }\n\n        emit CampaignCreated(activeCampaignId, _totalRounds, _initialModelCID);\n        emit CampaignStateChanged(activeCampaignId, CampaignState.SUBMISSION);\n        emit GlobalModelChanged(newCampaign.id, newCampaign.currentRound, newCampaign.state, _initialModelCID);\n    }\n\n    /**\n     * @dev Submits a locally trained model's CID for the current round of the active campaign.\n     * Can only be called by an authorized participant for the active campaign.\n     * @param _modelCID The IPFS CID of the new local model.\n     */\n    function submitModel(string memory _modelCID) external {\n        Campaign storage campaign = campaigns[activeCampaignId];\n        uint8 round = campaign.currentRound;\n\n        require(\n            campaign.state == CampaignState.SUBMISSION,\n            \"Not in submission phase\"\n        );\n        require(\n            block.timestamp <= campaign.submissionDeadline,\n            \"Submission period has ended\"\n        );\n        require(\n            campaign.participants[msg.sender],\n            \"Not an authorized trainer for this campaign\"\n        );\n        require(\n            bytes(roundSubmissions[activeCampaignId][round][msg.sender])\n                .length == 0,\n            \"Already submitted for this round\"\n        );\n\n        roundSubmissions[activeCampaignId][round][msg.sender] = _modelCID;\n        modelsInRound[activeCampaignId][round].push(\n            ModelSubmission({\n                cid: _modelCID,\n                trainer: msg.sender,\n                positiveVotes: 0 // Note: Validation is removed per instructions\n            })\n        );\n\n        // --- NEW: Increment the submission counter ---\n        campaign.submissionCounter++;\n\n        emit ModelSubmitted(activeCampaignId, round, msg.sender, _modelCID);\n    }\n\n    /**\n     * @dev NEW FUNCTION: Triggers the move to the AGGREGATION state.\n     * Anyone can call this function. It will only succeed if the conditions are met.\n     * This prevents a single user from being burdened with high gas costs on submission.\n     */\n    function attemptAggregation() external {\n        Campaign storage campaign = campaigns[activeCampaignId];\n        require(\n            campaign.state == CampaignState.SUBMISSION,\n            \"Not in submission phase\"\n        );\n\n        // --- NEW: Check for either condition to be true ---\n        bool deadlineReached = block.timestamp > campaign.submissionDeadline;\n        bool thresholdMet = campaign.submissionCounter >= campaign.minSubmissions;\n\n        require(\n            deadlineReached || thresholdMet,\n            \"Aggregation conditions not met\"\n        );\n\n        campaign.state = CampaignState.AGGREGATION;\n        emit CampaignStateChanged(activeCampaignId, CampaignState.AGGREGATION);\n    }\n\n    // /**\n    //  * @dev Submits a validation for a model in the current round of the active campaign.\n    //  * @param _modelCID The CID of the model being validated.\n    //  * @param _isValid The validator's judgment (true for valid, false for invalid).\n    //  */\n    // function validateModel(string memory _modelCID, bool _isValid) external {\n    //     Campaign storage campaign = campaigns[activeCampaignId];\n    //     uint8 round = campaign.currentRound;\n\n    //     require(campaign.state == CampaignState.VALIDATION, \"Not in validation phase\");\n    //     require(!modelValidators[activeCampaignId][round][_modelCID][msg.sender], \"Already voted on this model\");\n\n    //     modelValidators[activeCampaignId][round][_modelCID][msg.sender] = true;\n\n    //     if (_isValid) {\n    //         for (uint i = 0; i < modelsInRound[activeCampaignId][round].length; i++) {\n    //             if (keccak256(abi.encodePacked(modelsInRound[activeCampaignId][round][i].cid)) == keccak256(abi.encodePacked(_modelCID))) {\n    //                 modelsInRound[activeCampaignId][round][i].positiveVotes++;\n    //                 break;\n    //             }\n    //         }\n    //     }\n    //     emit ModelValidated(activeCampaignId, round, msg.sender, _modelCID, _isValid);\n    // }\n\n    /**\n     * @dev Finalizes the current round and, if applicable, automatically starts the next one.\n     * Called by the aggregator node.\n     * If this was the final round, the campaign is completed.\n     * @param _newGlobalModelCID The IPFS CID of the new aggregated global model.\n     */\n    // --- MODIFIED: Now contains automatic round progression logic ---\n    function finalizeRound(\n        string memory _newGlobalModelCID\n    ) external onlyOwner {\n        Campaign storage campaign = campaigns[activeCampaignId];\n        uint8 round = campaign.currentRound;\n\n        require(\n            campaign.state == CampaignState.AGGREGATION,\n            \"Not in aggregation phase\"\n        );\n        require(\n            bytes(_newGlobalModelCID).length > 0,\n            \"New global model CID cannot be empty\"\n        );\n\n        campaign.globalModelCID = _newGlobalModelCID;\n        campaign.submissionCounter = 0;\n\n        emit GlobalModelChanged(campaign.id, round, campaign.state, _newGlobalModelCID);\n        emit RoundFinalized(activeCampaignId, round, _newGlobalModelCID);\n        \n        // Check if the campaign is complete\n        if (round == campaign.totalRounds) {\n            campaign.state = CampaignState.INACTIVE;\n            emit CampaignCompleted(activeCampaignId, campaign.currentRound,_newGlobalModelCID);\n            emit CampaignStateChanged(activeCampaignId, CampaignState.INACTIVE);\n        } else {\n            // Automatically start the next round\n            campaign.currentRound++;\n            campaign.state = CampaignState.SUBMISSION;\n            emit NewRoundStarted(\n                activeCampaignId,\n                campaign.currentRound,\n                _newGlobalModelCID\n            );\n            emit CampaignStateChanged(\n                activeCampaignId,\n                CampaignState.SUBMISSION\n            );\n        }\n    }\n\n    /**\n     * @dev Cancels the currently active campaign.\n     */\n    function cancelCampaign() external onlyOwner {\n        Campaign storage campaign = campaigns[activeCampaignId];\n        require(\n            campaign.state != CampaignState.INACTIVE,\n            \"No active campaign to cancel\"\n        );\n\n        // Mark the campaign as inactive to release the lock\n        campaign.state = CampaignState.INACTIVE;\n\n        emit CampaignCancelled(activeCampaignId);\n        emit CampaignStateChanged(activeCampaignId, CampaignState.INACTIVE);\n    }\n\n    // --- View Functions ---\n\n    /**\n     * @dev Returns CIDs of models that have met the validation threshold for the current round.\n     */\n    function getValidModelsForCurrentRound() external view returns (string[] memory) {\n        require(activeCampaignId > 0, \"No campaign is active\");\n        Campaign storage campaign = campaigns[activeCampaignId];\n        uint8 round = campaign.currentRound;\n\n        uint256 validCount = 0;\n        for (uint i = 0; i < modelsInRound[activeCampaignId][round].length; i++) {\n            if (modelsInRound[activeCampaignId][round][i].positiveVotes >= REQUIRED_VALIDATIONS) {\n                validCount++;\n            }\n        }\n\n        string[] memory validModels = new string[](validCount);\n        uint256 index = 0;\n        for (uint i = 0; i < modelsInRound[activeCampaignId][round].length; i++) {\n            if (modelsInRound[activeCampaignId][round][i].positiveVotes >= REQUIRED_VALIDATIONS) {\n                validModels[index] = modelsInRound[activeCampaignId][round][i].cid;\n                index++;\n            }\n        }\n        return validModels;\n    }\n}\n"
      }
    }
  }
}