{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-7f3a89ffdde52cac79942931ee286ebeda31fa74",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/FederatedLearning.sol": "project/contracts/FederatedLearning.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/FederatedLearning.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title FederatedLearning\n * @dev A smart contract to coordinate rounds of a decentralized federated learning process.\n * It uses IPFS CIDs to reference models stored off-chain.\n * The process follows four main phases: Submission, Validation, Aggregation, and Completion.\n */\ncontract FederatedLearning is Ownable {\n    // --- Enums and Structs ---\n\n    enum RoundState {\n        INACTIVE,   // Round has not started or is complete\n        SUBMISSION, // Accepting model submissions from trainers\n        VALIDATION, // Accepting validation judgments from validators\n        AGGREGATION // Waiting for the aggregator to finalize the round\n    }\n\n    struct ModelSubmission {\n        string cid;\n        address trainer;\n        uint256 positiveVotes;\n    }\n\n    // --- State Variables ---\n\n    uint256 public currentRound;\n    RoundState public currentRoundState;\n    string public globalModelCID;\n\n    uint256 public constant REQUIRED_VALIDATIONS = 1; // Min positive votes for a model\n\n    // Round -> Trainer Address -> Model CID\n    mapping(uint256 => mapping(address => string)) private roundSubmissions;\n    // Round -> Model CID -> Validator Address -> Voted (true)\n    mapping(uint256 => mapping(string => mapping(address => bool))) private modelValidators;\n    // Round -> All submitted model CIDs for that round\n    mapping(uint256 => ModelSubmission[]) private modelsInRound;\n    \n    // --- Events ---\n\n    event NewRoundStarted(uint256 indexed roundId, string initialModelCID);\n    event ModelSubmitted(uint256 indexed roundId, address indexed trainer, string modelCID);\n    event ModelValidated(uint256 indexed roundId, address indexed validator, string modelCID, bool isValid);\n    event RoundFinalized(uint256 indexed roundId, string newGlobalModelCID);\n    event RoundStateChanged(uint256 indexed roundId, RoundState newState);\n    event GlobalModelUpdated(string newGlobalModelCID);\n    event RoundCancelled(uint256 indexed roundId);\n    // --- Constructor ---\n\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    // --- Functions ---\n\n    /**\n     * @dev Starts a new training round.\n     * Can only be called by the owner.\n     * Uses the global model CID already stored in the contract.\n     */\n    // --- MODIFIED FUNCTION ---\n    function startNewRound() external onlyOwner {\n        require(currentRoundState == RoundState.INACTIVE, \"An existing round is active\");\n        require(bytes(globalModelCID).length > 0, \"Global model CID must be set first\");\n\n        currentRound++;\n        currentRoundState = RoundState.SUBMISSION;\n        emit NewRoundStarted(currentRound, globalModelCID); // Now uses the state variable\n        emit RoundStateChanged(currentRound, RoundState.SUBMISSION);\n    }\n\n    /**\n     * @dev Submits a locally trained model's CID for the current round.\n     * Called by training nodes.\n     * @param _modelCID The IPFS CID of the new local model.\n     */\n    function submitModel(string memory _modelCID) external {\n        require(currentRoundState == RoundState.SUBMISSION, \"Not in submission phase\");\n        require(bytes(roundSubmissions[currentRound][msg.sender]).length == 0, \"Already submitted for this round\");\n\n        roundSubmissions[currentRound][msg.sender] = _modelCID;\n        modelsInRound[currentRound].push(ModelSubmission({\n            cid: _modelCID,\n            trainer: msg.sender,\n            positiveVotes: 0\n        }));\n        emit ModelSubmitted(currentRound, msg.sender, _modelCID);\n    }\n\n    /**\n     * @dev Submits a validation judgment for a specific model in the current round.\n     * Called by validator nodes.\n     * @param _modelCID The CID of the model being validated.\n     * @param _isValid The validator's judgment (true for valid, false for invalid).\n     */\n    function validateModel(string memory _modelCID, bool _isValid) external {\n        require(currentRoundState == RoundState.VALIDATION, \"Not in validation phase\");\n        require(!modelValidators[currentRound][_modelCID][msg.sender], \"Already voted on this model\");\n\n        modelValidators[currentRound][_modelCID][msg.sender] = true;\n\n        if (_isValid) {\n            for (uint i = 0; i < modelsInRound[currentRound].length; i++) {\n                if (keccak256(abi.encodePacked(modelsInRound[currentRound][i].cid)) == keccak256(abi.encodePacked(_modelCID))) {\n                    modelsInRound[currentRound][i].positiveVotes++;\n                    break;\n                }\n            }\n        }\n\n        emit ModelValidated(currentRound, msg.sender, _modelCID, _isValid);\n    }\n\n    /**\n     * @dev Finalizes the round with the new aggregated global model CID.\n     * Called by the aggregator node.\n     * @param _newGlobalModelCID The IPFS CID of the new global model.\n     */\n    function finalizeRound(string memory _newGlobalModelCID) external onlyOwner {\n        require(currentRoundState == RoundState.AGGREGATION, \"Not in aggregation phase\");\n        \n        globalModelCID = _newGlobalModelCID;\n        currentRoundState = RoundState.INACTIVE;\n\n        emit RoundFinalized(currentRound, _newGlobalModelCID);\n        emit RoundStateChanged(currentRound, RoundState.INACTIVE);\n    }\n\n    // --- View Functions ---\n\n    /**\n     * @dev Returns a list of model CIDs that have met the required validation threshold.\n     * Called by the aggregator to know which models to fetch from IPFS.\n     */\n    function getValidModelsForCurrentRound() external view returns (string[] memory) {\n        uint256 validCount = 0;\n        for (uint i = 0; i < modelsInRound[currentRound].length; i++) {\n            if (modelsInRound[currentRound][i].positiveVotes >= REQUIRED_VALIDATIONS) {\n                validCount++;\n            }\n        }\n\n        string[] memory validModels = new string[](validCount);\n        uint256 index = 0;\n        for (uint i = 0; i < modelsInRound[currentRound].length; i++) {\n            if (modelsInRound[currentRound][i].positiveVotes >= REQUIRED_VALIDATIONS) {\n                validModels[index] = modelsInRound[currentRound][i].cid;\n                index++;\n            }\n        }\n        return validModels;\n    }\n    \n    // --- State Management (Owner only) ---\n    \n    /**\n     * @dev Sets or overwrites the global model CID. Can only be called by the owner.\n     * @param _newGlobalModelCID The IPFS CID for the global model.\n     */\n    // --- NEW FUNCTION ---\n    function setGlobalModelCID(string memory _newGlobalModelCID) external onlyOwner {\n        require(bytes(_newGlobalModelCID).length > 0, \"CID cannot be empty\");\n        require(currentRoundState == RoundState.INACTIVE, \"Cannot set model during an active round\");\n        globalModelCID = _newGlobalModelCID;\n        emit GlobalModelUpdated(_newGlobalModelCID);\n    }\n\n    /**\n     * @dev Manually moves the round to the next state.\n     * In a production system, this would be automated by timers.\n     */\n    function advanceRoundState() external onlyOwner {\n        require(currentRoundState != RoundState.INACTIVE, \"No active round\");\n\n        if (currentRoundState == RoundState.SUBMISSION) {\n            currentRoundState = RoundState.VALIDATION;\n            emit RoundStateChanged(currentRound, RoundState.VALIDATION);\n        } else if (currentRoundState == RoundState.VALIDATION) {\n            currentRoundState = RoundState.AGGREGATION;\n            emit RoundStateChanged(currentRound, RoundState.AGGREGATION);\n        }\n    }\n\n    function cancelRound() external onlyOwner {\n        require(currentRoundState != RoundState.INACTIVE, \"No active round to cancel\");\n        uint256 roundToCancel = currentRound;\n\n        currentRoundState = RoundState.INACTIVE;\n        currentRound--; // Revert the round increment from startNewRound\n\n        // Clean up data for the cancelled round to prevent side-effects\n        delete modelsInRound[roundToCancel];\n\n        emit RoundCancelled(roundToCancel);\n        emit RoundStateChanged(roundToCancel, RoundState.INACTIVE);\n    }\n}"
      }
    }
  }
}